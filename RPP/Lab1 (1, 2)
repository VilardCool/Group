#include <iostream>
#include <omp.h>
#include <chrono>
#include <iomanip>

using namespace std;

void Init(int* arr, int amount, int maxNum) {
	for (int i = 0; i < amount; i++) arr[i] = rand() % maxNum;
}

void PrintResults(int* arr, int amount) {
	for (int i = 0; i < amount; i++) cout << arr[i] << "  ";
	cout << "\n\n";
}

void OddEvenSort(int* array, int amount)
{
	auto start = chrono::high_resolution_clock::now();
	for (int i = 0; i < amount; i++)
	{
		int first = i % 2;
		for (int j = first; j < amount - 1; j+=2)
		{
			if (array[j] > array[j + 1])
			{
				int temp = array[j];
				array[j] = array[j + 1];
				array[j + 1] = temp;
			}
		}
	}
	auto end = chrono::high_resolution_clock::now();
	cout << "Time taken by program is : " << fixed << chrono::duration_cast<chrono::nanoseconds>(end - start).count() * 1e-9 << setprecision(6) << " sec\n";
}

void OMPOddEvenSort(int* array, int amount)
{
	auto start = chrono::high_resolution_clock::now();
	for (int i = 0; i < amount; i++)
	{
		int first = i % 2;
#pragma omp parallel for shared(array, first) num_threads(8)
		for (int j = first; j < amount - 1; j += 2)
		{
			if (array[j] > array[j + 1])
			{
				int temp = array[j];
				array[j] = array[j + 1];
				array[j + 1] = temp;
			}
		}
	}
	auto end = chrono::high_resolution_clock::now();
	cout << "Time taken by program is : " << fixed << chrono::duration_cast<chrono::nanoseconds>(end - start).count() * 1e-9 << setprecision(6) << " sec\n";
}

int main(int argc, char* argv[])
{
	srand(time(NULL));

	const int amount = 10000;
	int maxNum = 100;
	int arr[amount];

	//cout << "Array:\n";
	Init(arr, amount, maxNum);
	//PrintResults(arr, amount);

	int SArr[amount];
	copy(begin(arr), end(arr), begin(SArr));
	int OMPArr[amount];
	copy(begin(arr), end(arr), begin(OMPArr));

	cout << "Serial algorithm results\n";
	OddEvenSort(SArr, amount);
	//PrintResults(SArr, amount);
	cout << "\n--------------\n\n";

	printf("OpenMP parallel algorithm results\n");
	OMPOddEvenSort(OMPArr, amount);
	//PrintResults(OMPArr, amount);
	cout << "\n--------------\n\n";

	system("pause");
}
