#include <iostream>
#include <mpi.h>
#include <math.h>

using namespace std;

void Init(int* arr, int amount, int maxNum) {
	for (int i = 0; i < amount; i++) arr[i] = rand() % maxNum;
}

void PrintResults(int* arr, int amount) {
	for (int i = 0; i < amount; i++) cout << arr[i] << "  ";
	cout << "\n\n";
}

void BubbleSort(int* array, int amount) 
{
	for (int i = 0; i < amount; i++)
	{
		int first = i % 2;
		for (int j = first; j < amount - 1; j += 2)
		{
			if (array[j] > array[j + 1]) 
			{
				int temp = array[j];
				array[j] = array[j + 1];
				array[j + 1] = temp;
			}
		}
	}
}

int* merge(int v1[], int n1, int v2[], int n2)
{
	int* result = new int[n1+n2];
	int i = 0, j = 0;
	for (int k = 0; k < n1 + n2; k++) {
		if (i >= n1) {
			result[k] = v2[j];
			j++;
		}
		else if (j >= n2) {
			result[k] = v1[i];
			i++;
		}
		else if (v1[i] < v2[j]) {
			result[k] = v1[i];
			i++;
		}
		else {
			result[k] = v2[j];
			j++;
		}
	}
	return result;
}

int main(int argc, char* argv[])
{
	srand(time(NULL));

	double start, finish, duration;

	int ProcNum;
	int ProcRank;

	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &ProcNum);
	MPI_Comm_rank(MPI_COMM_WORLD, &ProcRank);

	const int amount = 10000;
	int maxNum = 100;
	int arr[amount];
	int* res = new int[amount];
	int part = amount / ProcNum;

	if (ProcRank == 0) Init(arr, amount, maxNum);

	int* bufArr = new int[amount] {0};

	MPI_Scatter(arr, part, MPI_INT, bufArr, part, MPI_INT, 0, MPI_COMM_WORLD);

	start = MPI_Wtime();

	BubbleSort(bufArr, part);
	res = bufArr;
	for (int i = 0; i < log2(ProcNum); i++) {
		if (ProcRank % (int)(2 * pow(2, i)) == pow(2, i)) {
			MPI_Send(bufArr, part * (int)pow(2, i), MPI_INT, ProcRank - (int)pow(2, i), 0, MPI_COMM_WORLD);
		}
		if (ProcRank % (int)(2 * pow(2, i)) == 0) {
			int* other = new int[part * (int)pow(2, i)]{0};
			MPI_Recv(other, part * (int)pow(2, i), MPI_INT, ProcRank + (int)pow(2, i), 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			res = merge(res, part * (int)pow(2, i), other, part * (int)pow(2, i));
			free(bufArr);
			free(other);
			bufArr = res;
		}
	}
	finish = MPI_Wtime();
	duration = finish - start;

	MPI_Finalize();

	if (ProcRank == 0) {
		cout << "Time of execution = "<< duration<<"\n";
		//PrintResults(res, amount);
	}
}
